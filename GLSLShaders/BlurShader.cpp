#include "Shaders.hpp"

const char * Shaders::BlurVertex =
    "#version 330 core\n"
    "layout (location = 0) in vec3 position;"
    "layout (location = 1) in vec3 colour;"
    "layout (location = 2) in vec3 normal;"
    "layout (location = 3) in vec2 uv;"
    "out vec4 frag_colour;"
    "out vec3 frag_normal;"
    "out vec2 frag_uv;"
    "uniform mat4 model;"
    "uniform mat4 view;"
    "uniform mat4 proj;"
    "void main (void) {"
    "    gl_Position = proj * view * model * vec4(position.x, position.y, position.z, 1.0);"
    "    frag_colour   = vec4(colour, 1.0);"
    "    frag_normal   = normal;"
    "    frag_uv       = uv;"
    "}";

const char * Shaders::BlurFragment =
    "#version 330 core\n"
    "in vec4 frag_position;"
    "in vec4 frag_colour;"
    "in vec3 frag_normal;"
    "in vec2 frag_uv;"
    "out vec4 color;"
    "uniform sampler2D tex;"
    "const float offset = 1.0 / 230;"
    "void main (void) {"
    "   vec2 offsets[9] = vec2[] ("
    "       vec2 (-offset, offset),"
    "       vec2 (0.0f,    offset),"
    "       vec2 (offset,  offset),"
    "       vec2 (-offset, 0.0f),"
    "       vec2 (0.0f,    0.0f),"
    "       vec2 (offset,  0.0f),"
    "       vec2 (-offset, -offset),"
    "       vec2 (0.0f,    -offset),"
    "       vec2 (offset,  -offset)"
    "   );"
    "   float kernel [9] = float [] ("
    "        1.0 / 16, 2.0 / 16, 1.0 / 16,"
    "        2.0 / 16, 4.0 / 16, 2.0 / 16,"
    "        1.0 / 16, 2.0 / 16, 1.0 / 16"
    "    );"
    "    vec3 sampleTexture [9];"
    "    for (int i = 0; i < 9; i++)"
    "        sampleTexture[i] = vec3(texture(tex, frag_uv.st + offsets[i]));"
    "    vec3 col = vec3(0.0);"
    "    for (int i = 0; i < 9; i++)"
    "        col += sampleTexture[i] * kernel[i];"
    "    color = vec4(col, 1.0);"
    "}";
